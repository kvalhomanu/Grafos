from grafo import Grafo

g = Grafo()

def vertices():
    N = input("Informe os vértices separados por vírgula e espaço: ").split(", ")
    for i in N:
        g.adicionaVertice(i)

    return N

def arestas():
    A = input("Informe as arestas seguido dos vértices que ela conecta: ").split(", ")
    for i in range(len(A)):
        A[i] = A[i].replace(")", "")
        A[i] = A[i].split("(")
        g.adicionaAresta(A[i][0], A[i][1])
    return A

def incidencia_vertice():
    try:  # testa incidencia(Usuario informa o vertice)
        incidencia_V = input("Informe o vertice para saber a incidência: ")
        for x in range(len(g.N)):
            for z in range(len(g.N)):
                if incidencia_V + "-" + g.N[z] in A[x][1] or g.N[z] + "-" + incidencia_V in A[x][1]:
                    print(A[x][1], "Incide em ", incidencia_V)
    except IndexError:
        print()

def grau_vertice(matriz, V_grau):
    try:
        grau = 0
        for x in range(len(A)):
            for z in range(len(g.N)):
                if V_grau + "-" + g.N[z] in A[x][1] or g.N[z] + "-" + V_grau in A[x][1]:
                    grau += 1
        return grau
    except IndexError:
        pass

def vertices_nao_adjacente(matriz):
    lista_nao_adjacantes = []
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            if matriz[i][j] == 0 and g.N[j] + "-" + g.N[i] not in A[i][1]:
                lista_nao_adjacantes.append((g.N[j] + "-" + g.N[i]))

    return lista_nao_adjacantes

def verifica_adjacente(matriz):
    tabular(matriz)
    for x in range(len(matriz)):
        for z in range(len(matriz)):
            if matriz[x][z] > 0:
                return True
    return False

def matriz_adjacencia():
    matriz = []
    lista = []
    for i in g.A.values():
        lista.append(i)
    for i in range(len(g.N)):
        matriz.append([])
        for j in range(len(g.N)):
            if g.N[i] + "-" + g.N[j] in lista:
                matriz[i].append(1)
            else:
                matriz[i].append(0)
    return matriz

def tabular(matriz):
    for x in range(len(matriz)):
        for z in range(len(matriz[x])):
            if (z - 1) < len(matriz[x]):
                print(matriz[x][z], end=" ")
            else:
                print(matriz[x][z], end="")
        print("\n")

def verifica_lacos(matriz):
    for x in range(len(matriz)):
        if matriz[x][x] > 0:
            return True
    return False

def verifica_paralelo(matriz):
    for u in range(len(matriz)):  # Verifica paralelos
        for h in range(len(matriz)):
            if (matriz[u][h] == 1) and (matriz[h][u] == 1) and (u != h):
                return True
            elif matriz[u][h] > 1:
                return True
    return False

def verifica_completo(matriz):
    for i in range(len(matriz)):
        for j in range(len(matriz[i])):
            if matriz[i][j] == 0 and i != j:
                return False
    return True

def Conexos(aresta, vertice, matriz):
    lista = set()
    indiceVertice = N.index(vertice)
    for i in aresta:
        j = N.index(i[1])
        if matriz[indiceVertice][j] > 0 and i[0] == vertice:
            lista.add(i[1])
    return lista

def pecorreGrafo(aresta,inicio, matriz):
    pilha = [inicio]
    visitados = set()
    while pilha:
        vertice = pilha.pop()
        if vertice not in visitados:
            visitados.add(vertice)
            pilha.extend(Conexos(aresta, vertice, matriz) - visitados)
    return visitados

def grafoConexo(aresta,matriz):
    for i in N:
        if len(N) != len(pecorreGrafo(aresta, i, matriz)):
            return False
    return True

def Euleriano(matriz):
    try:
        total = 0
        i = 0
        while((total <= 2) and (i <= len(matriz))):
            caminho = 0
            for j in range(len(matriz)):
                caminho += matriz[i][j]
                if(caminho %2 != 0):
                    total += 1
                i += 1
            if total > 2:
                print("Não há Caminho Euleriano.")
            else:
                print("Há Caminho Euleriano.")
    except IndexError:
        print()

def Asemtraço(A):
    paresemtraço = []
    for i in A:
        paresemtraço.append(i[1])
    for i in range(len(paresemtraço)):
        paresemtraço[i] = paresemtraço[i].split("-")
    return paresemtraço

N = vertices()
A = arestas()

while True:
    op = input("O Que deseja realizar: \n a - Verificar adjacentes "
               "\n b - Verificar laços \n c - Verificar paralelos "
               "\n d - Incidencia dos vertices  \n e - Grau do vertice "
               "\n f - Verifica completo \n g - Caminho de Euler \n h - Conexo \n m - Matriz de Adjacencia \n n - Não adjacentes \n t - Imprimir Matriz \n Finalizar ( fim ) \n").lower()

    if op == "a":  # Verifica se um vertice eh "vizinho" de outro, atraves de um aresta
        print(verifica_adjacente(matriz_adjacencia()))

    elif op == "b":  # Eh uma aresta que conecta um vertice a ele mesmo
        print(verifica_lacos(matriz_adjacencia()))

    elif op == "c":  # Quando ha duas arestas entre os mesmos vertices
        print(verifica_paralelo(matriz_adjacencia()))

    elif op == "d":  # Verifica a incidencia de um vertice atraves das arestas
        incidencia_vertice()

    elif op == "e":  # Verifica o grau do vertice
        V_grau = input("Informe o vertice a saber o grau: ")
        grau = grau_vertice(matriz_adjacencia(), V_grau)
        print(grau)

    elif op == "f":  # Verifica se o grau eh completo
        print(verifica_completo(matriz_adjacencia()))
        
    elif op == "g":  #Verifica se ha caminhos eulirianos
        print(Euleriano(matriz_adjacencia()))

    elif op == "h":  #Verifica se o grafo eh conexo
        print(grafoConexo(Asemtraço(A), matriz_adjacencia()))

    elif op == "m":  # Verifica Matriz de adjacencia
        matriz_adjacencia()

    elif op == "n":  # Informa os vertices nao adjacentes
        print(vertices_nao_adjacente(matriz_adjacencia()))

    elif op == "t":  # Imprime de formar tabulada a matriz
        tabular(matriz_adjacencia())

    elif op == "fim":
        break
        
    else:
        print("Opção invalida \n")
        op = input("O Que deseja realizar: \n a - Verificar adjacentes "
                   "\n b - Verificar laços \n c - Verificar paralelos "
                   "\n d - Incidencia dos vertices  \n e - Grau do vertice "
                   "\n f - Verifica completo \n g - Caminho de Euler \n h - Conexo \n m - Matriz de Adjacencia \n n - Não adjacentes \n t - Imprimir Matriz \n Finalizar ( fim ) \n").lower()


'''
#conexo
A, B, C, D
a1(A-B), a2(B-C), a3(C-D), a4(D-A)
#completo
A, B, C, D
a1(A-B), a2(A-C), a3(A-D), a4(B-C), a5(B-D), a6(D-C)
'''
